import streamlit as st
import pandas as pd
import joblib
from datetime import timedelta
import matplotlib.pyplot as plt
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
st.markdown("""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Comic+Neue:wght@700&display=swap');
        
        .stApp {
            background-color: #FFF0F5;
            font-family: 'Comic Neue', cursive;
            color: #000000 !important;
        }
        
        h1, h2, h3 {
            color: #FF69B4 !important;
            font-family: 'Comic Neue', cursive !important;
        }
        
        .stDateInput, .stButton>button {
            border-radius: 15px !important;
            border: 2px solid #FF69B4 !important;
            color: #000000 !important;
        }
        
        .stButton>button {
            background-color: #FFB6C1 !important;
            color: #000000 !important;
            font-weight: bold;
        }
        
        .stDataFrame {
            border: 2px solid #FF69B4 !important;
            border-radius: 15px;
            color: #000000 !important;
        }
        
        .metric {
            background-color: #FFE4E1 !important;
            border: 2px solid #FF69B4 !important;
            border-radius: 15px;
            padding: 10px !important;
            color: #000000 !important;
        }
        
        /* –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ */
        .stMetric div, .stMetric label {
            color: #000000 !important;
        }
    </style>
""", unsafe_allow_html=True)


with open(r'C:\Users\–ï–≤–≥–µ–Ω–∏—è\Desktop\reinforcement_task\data\scaler1.pkl', 'rb') as f:
    model_artifact = joblib.load(f)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    rf_model = model_artifact['rf_model']
    catboost_model = model_artifact['catboost_model']
    features_order = model_artifact['features_order']  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É

historical_df = pd.read_csv(r'C:\Users\–ï–≤–≥–µ–Ω–∏—è\Desktop\reinforcement_task\data\historical_data.csv')
historical_df['dt'] = pd.to_datetime(historical_df['dt'])
historical_df = historical_df.set_index('dt')

def generate_predictions(start_date, weeks_ahead=6):
    current_date = start_date
    predictions = []
    
    extended_df = historical_df.copy().sort_index()
    
    for week in range(weeks_ahead):
        forecast_date = current_date + timedelta(days=7*week)
        
        if forecast_date in extended_df.index:
            continue
            
        features = {
            'month': forecast_date.month,
            'quarter': forecast_date.quarter,
            'year': forecast_date.year,
        }
        
        for lag in [1, 2]:
            lag_date = forecast_date - timedelta(days=lag)
            available_dates = extended_df.index[extended_df.index <= lag_date]
            
            if len(available_dates) == 0:
                st.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ª–∞–≥–∞ {lag} –Ω–∞ –¥–∞—Ç—É {forecast_date.strftime('%Y-%m-%d')}")
                return None
                
            closest_date = available_dates.max()
            features[f'lag_{lag}'] = extended_df.loc[closest_date, 'log_price']
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π features_order
        input_data = pd.DataFrame([features])[features_order]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        rf_pred = rf_model.predict(input_data)[0]  # –ò–∑–º–µ–Ω–µ–Ω–æ
        cat_pred = catboost_model.predict(input_data)[0]  # –ò–∑–º–µ–Ω–µ–Ω–æ
        
        log_pred = (rf_pred + cat_pred) / 2
        final_pred = np.exp(log_pred)
        
        extended_df.loc[forecast_date] = {
            '–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É': final_pred,
            'log_price': log_pred,
            'lag_1': features['lag_1'],
            'lag_2': features['lag_2'],
            'month': features['month'],
            'quarter': features['quarter'],
            'year': features['year']
        }
        
        predictions.append((forecast_date, final_pred))
    
    return pd.DataFrame(predictions, columns=['Date', 'Predicted Price'])

def main():
    st.title('üåà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É')
    
    # –≤—ã–±–æ—Ä –¥–∞—Ç—ã
    last_historical_date = historical_df.index.max().date()  # –¢–µ–ø–µ—Ä—å historical_df –¥–æ—Å—Ç—É–ø–Ω–∞
    min_date = last_historical_date + timedelta(weeks=1)
    
    input_date = st.date_input(
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫):',
        min_value=min_date,
        max_value=last_historical_date + timedelta(weeks=26),
        value=min_date
    )
    
    if input_date.weekday() != 0:
        st.error("üö® –¢–µ–Ω–¥–µ—Ä—ã –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º!")
        return
    
    if st.button('‚ú® –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑'):
        start_date = pd.to_datetime(input_date)
        
        # –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º
        predictions = generate_predictions(start_date)
        
        if predictions is not None:
            # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥
            forecast_df = predictions.set_index('Date')
            
            # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            predicted_prices = forecast_df['Predicted Price'].tolist()
            current_price = predicted_prices[0]
            
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            possible_n = 0
            for n in predicted_prices:
                if current_price <= n:
                    possible_n += 1
                elif current_price > n:
                    break

            max_n = possible_n if possible_n != 0 else 1
            
            # –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ä–æ–∑–æ–≤—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å —á–µ—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            fig, ax = plt.subplots(figsize=(10, 5))
            ax.plot(forecast_df.index, forecast_df['Predicted Price'], 
                    marker='o', color='#FF69B4', markersize=12,
                    linestyle='-', linewidth=3, label='–ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Ü–µ–Ω–∞')
            ax.axhline(y=current_price, color='#FF1493', linestyle='--', 
                    linewidth=2, label=f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} —Ä—É–±/—Ç')

            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–µ—Ä–Ω—ã–π
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=12, color='black')  # ‚Üê –ò–∑–º–µ–Ω–µ–Ω–æ
            ax.set_ylabel('–¶–µ–Ω–∞ (—Ä—É–±/—Ç)', fontsize=12, color='black')  # ‚Üê –ò–∑–º–µ–Ω–µ–Ω–æ
            ax.set_title('üéÄ –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É', fontsize=14, pad=20, color='#FF1493')
            ax.tick_params(colors='black')  # ‚Üê –ò–∑–º–µ–Ω–µ–Ω–æ
            
            plt.xticks(rotation=45)
            plt.grid(True, linestyle='--', alpha=0.7, color='#FFB6C1')
            plt.gcf().set_facecolor('#FFF0F5')
            plt.tight_layout()
            st.pyplot(fig)
            
            # –≤—ã–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            st.subheader("üå∏ –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:")
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**üìÖ –î–∞—Ç—ã –∏ —Ü–µ–Ω—ã:**")
                st.dataframe(forecast_df.reset_index().style.format({
                    'Date': lambda x: x.strftime('%Y-%m-%d'),
                    'Predicted Price': '{:.2f} —Ä—É–±'
                }).set_properties(**{
                    'background-color': '#FFE4E1',
                    'color': '#000000',  # ‚Üê –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —á–µ—Ä–Ω—ã–π
                    'border': '1px solid #FF69B4'
                }))
            
            with col2:
                st.write("**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", 
                          f"{forecast_df.mean().values[0]:.2f} —Ä—É–±",
                          delta_color="off")
                st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", 
                          f"{forecast_df.min().values[0]:.2f} —Ä—É–±",
                          delta_color="off")
                st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", 
                          f"{forecast_df.max().values[0]:.2f} —Ä—É–±",
                          delta_color="off")
            
            # –≤—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        st.subheader("üíñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        recommendation_style = """
            <div style='
                background-color: #FFB6C1;
                padding: 20px;
                border-radius: 15px;
                border: 2px solid #FF69B4;
                color: #000000;
                margin-bottom: 20px;
            '>
        """

        if max_n == 1:
            text = f"## üéâ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—É–ø–∫–∏: {max_n} –Ω–µ–¥–µ–ª—è"
        elif max_n in [2, 3, 4]:
            text = f"## üéâ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—É–ø–∫–∏: {max_n} –Ω–µ–¥–µ–ª–∏"
        else:
            text = f"## üéâ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—É–ø–∫–∏: {max_n} –Ω–µ–¥–µ–ª—å"

        st.markdown(
            recommendation_style + text + "</div>", 
            unsafe_allow_html=True
        )
main()
