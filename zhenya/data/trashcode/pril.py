import streamlit as st
import pandas as pd
import joblib
from datetime import timedelta
import matplotlib.pyplot as plt
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
st.markdown("""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Comic+Neue:wght@700&display=swap');
        
        .stApp {
            background-color: #FFF0F5;
            font-family: 'Comic Neue', cursive;
            color: #000000 !important;
        }
        
        h1, h2, h3 {
            color: #FF69B4 !important;
            font-family: 'Comic Neue', cursive !important;
        }
        
        .stDateInput, .stButton>button {
            border-radius: 15px !important;
            border: 2px solid #FF69B4 !important;
            color: #000000 !important;
        }
        
        .stButton>button {
            background-color: #FFB6C1 !important;
            color: #000000 !important;
            font-weight: bold;
        }
        
        .stDataFrame {
            border: 2px solid #FF69B4 !important;
            border-radius: 15px;
            color: #000000 !important;
        }
        
        .metric {
            background-color: #FFE4E1 !important;
            border: 2px solid #FF69B4 !important;
            border-radius: 15px;
            padding: 10px !important;
            color: #000000 !important;
        }
        
        /* –ù–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ */
        .stMetric div, .stMetric label {
            color: #000000 !important;
        }
    </style>
""", unsafe_allow_html=True)


with open(r'C:\Users\–ï–≤–≥–µ–Ω–∏—è\Desktop\reinforcement_task\data\scaler1.pkl', 'rb') as f:
    model_artifact = joblib.load(f)
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    rf_model = model_artifact['rf_model']
    catboost_model = model_artifact['catboost_model']
    features_order = model_artifact['features_order']  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É

historical_df = pd.read_csv(r'C:\Users\–ï–≤–≥–µ–Ω–∏—è\Desktop\reinforcement_task\data\historical_data.csv')
historical_df['dt'] = pd.to_datetime(historical_df['dt'])
historical_df = historical_df.set_index('dt')

def generate_predictions(start_date, weeks_ahead=6):
    current_date = start_date
    predictions = []
    
    extended_df = historical_df.copy().sort_index()
    
    for week in range(weeks_ahead):
        forecast_date = current_date + timedelta(days=7*week)
        
        if forecast_date in extended_df.index:
            continue
            
        features = {
            'month': forecast_date.month,
            'quarter': forecast_date.quarter,
            'year': forecast_date.year,
        }
        
        for lag in [1, 2]:
            lag_date = forecast_date - timedelta(days=lag)
            available_dates = extended_df.index[extended_df.index <= lag_date]
            
            if len(available_dates) == 0:
                st.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ª–∞–≥–∞ {lag} –Ω–∞ –¥–∞—Ç—É {forecast_date.strftime('%Y-%m-%d')}")
                return None
                
            closest_date = available_dates.max()
            features[f'lag_{lag}'] = extended_df.loc[closest_date, 'log_price']
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π features_order
        input_data = pd.DataFrame([features])[features_order]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        rf_pred = rf_model.predict(input_data)[0]  # –ò–∑–º–µ–Ω–µ–Ω–æ
        cat_pred = catboost_model.predict(input_data)[0]  # –ò–∑–º–µ–Ω–µ–Ω–æ
        
        log_pred = (rf_pred + cat_pred) / 2
        final_pred = np.exp(log_pred)
        
        extended_df.loc[forecast_date] = {
            '–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É': final_pred,
            'log_price': log_pred,
            'lag_1': features['lag_1'],
            'lag_2': features['lag_2'],
            'month': features['month'],
            'quarter': features['quarter'],
            'year': features['year']
        }
        
        predictions.append((forecast_date, final_pred))
    
    return pd.DataFrame(predictions, columns=['Date', 'Predicted Price'])

def main():
    st.title('üåà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É')
    
    # –≤—ã–±–æ—Ä –¥–∞—Ç—ã
    last_historical_date = historical_df.index.max().date()  # –¢–µ–ø–µ—Ä—å historical_df –¥–æ—Å—Ç—É–ø–Ω–∞
    min_date = last_historical_date + timedelta(weeks=1)
    
    input_date = st.date_input(
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫):',
        min_value=min_date,
        max_value=last_historical_date + timedelta(weeks=26),
        value=min_date
    )
    
    if input_date.weekday() != 0:
        st.error("üö® –¢–µ–Ω–¥–µ—Ä—ã –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º!")
        return
    
    if st.button('‚ú® –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑'):
        start_date = pd.to_datetime(input_date)
        
        # –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º
        predictions = generate_predictions(start_date)
        
        if predictions is not None:
            # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥
            forecast_df = predictions.set_index('Date')
            
            # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            predicted_prices = forecast_df['Predicted Price'].tolist()
            current_price = predicted_prices[0]
            
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            possible_n = 0
            for n in predicted_prices:
                if current_price <= n:
                    possible_n += 1
                elif current_price > n:
                    break

            max_n = possible_n if possible_n != 0 else 1
            
            # –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ä–æ–∑–æ–≤—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å —á–µ—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            fig, ax = plt.subplots(figsize=(10, 5))
            ax.plot(forecast_df.index, forecast_df['Predicted Price'], 
                    marker='o', color='#FF69B4', markersize=12,
                    linestyle='-', linewidth=3, label='–ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Ü–µ–Ω–∞')
            ax.axhline(y=current_price, color='#FF1493', linestyle='--', 
                    linewidth=2, label=f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} —Ä—É–±/—Ç')

            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–µ—Ä–Ω—ã–π
            ax.set_xlabel('–î–∞—Ç–∞', fontsize=12, color='black')  # ‚Üê –ò–∑–º–µ–Ω–µ–Ω–æ
            ax.set_ylabel('–¶–µ–Ω–∞ (—Ä—É–±/—Ç)', fontsize=12, color='black')  # ‚Üê –ò–∑–º–µ–Ω–µ–Ω–æ
            ax.set_title('üéÄ –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É', fontsize=14, pad=20, color='#FF1493')
            ax.tick_params(colors='black')  # ‚Üê –ò–∑–º–µ–Ω–µ–Ω–æ
            
            plt.xticks(rotation=45)
            plt.grid(True, linestyle='--', alpha=0.7, color='#FFB6C1')
            plt.gcf().set_facecolor('#FFF0F5')
            plt.tight_layout()
            st.pyplot(fig)
            
            # –≤—ã–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            st.subheader("üå∏ –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:")
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**üìÖ –î–∞—Ç—ã –∏ —Ü–µ–Ω—ã:**")
                st.dataframe(forecast_df.reset_index().style.format({
                    'Date': lambda x: x.strftime('%Y-%m-%d'),
                    'Predicted Price': '{:.2f} —Ä—É–±'
                }).set_properties(**{
                    'background-color': '#FFE4E1',
                    'color': '#000000',  # ‚Üê –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —á–µ—Ä–Ω—ã–π
                    'border': '1px solid #FF69B4'
                }))
            
            with col2:
                st.write("**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", 
                          f"{forecast_df.mean().values[0]:.2f} —Ä—É–±",
                          delta_color="off")
                st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", 
                          f"{forecast_df.min().values[0]:.2f} —Ä—É–±",
                          delta_color="off")
                st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", 
                          f"{forecast_df.max().values[0]:.2f} —Ä—É–±",
                          delta_color="off")
            
            # –≤—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        st.subheader("üíñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        recommendation_style = """
            <div style='
                background-color: #FFB6C1;
                padding: 20px;
                border-radius: 15px;
                border: 2px solid #FF69B4;
                color: #000000;
                margin-bottom: 20px;
            '>
        """

        if max_n == 1:
            text = f"## üéâ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—É–ø–∫–∏: {max_n} –Ω–µ–¥–µ–ª—è"
        elif max_n in [2, 3, 4]:
            text = f"## üéâ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—É–ø–∫–∏: {max_n} –Ω–µ–¥–µ–ª–∏"
        else:
            text = f"## üéâ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—É–ø–∫–∏: {max_n} –Ω–µ–¥–µ–ª—å"

        st.markdown(
            recommendation_style + text + "</div>", 
            unsafe_allow_html=True
        )
main()


# import streamlit as st
# import pandas as pd
# import joblib  # –ò–∑–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
# from datetime import timedelta
# import matplotlib.pyplot as plt
# import numpy as np

# # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
# with open(r'C:\Users\–ï–≤–≥–µ–Ω–∏—è\Desktop\reinforcement_task\data\scaler1.pkl', 'rb') as f:
#     model_artifact = joblib.load(f)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ joblib

# # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
# rf_model = model_artifact['rf_model']
# catboost_model = model_artifact['catboost_model']
# features_order = model_artifact['features_order']

# # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
# historical_df = pd.read_csv(r'C:\Users\–ï–≤–≥–µ–Ω–∏—è\Desktop\reinforcement_task\data\historical_data.csv')
# historical_df['dt'] = pd.to_datetime(historical_df['dt'])
# historical_df = historical_df.set_index('dt')

# def generate_predictions(start_date, weeks_ahead=6):
#     current_date = start_date
#     predictions = []
    
#     extended_df = historical_df.copy().sort_index()
    
#     for week in range(weeks_ahead):
#         forecast_date = current_date + timedelta(days=7*week)  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–Ω–∏
        
#         if forecast_date in extended_df.index:
#             continue
            
#         # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
#         features = {
#             'month': forecast_date.month,
#             'quarter': forecast_date.quarter,
#             'year': forecast_date.year,
#         }
        
#         # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∞–≥–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ (–¥–Ω–∏)
#         for lag in [1, 2]:
#             lag_date = forecast_date - timedelta(days=lag)
#             available_dates = extended_df.index[extended_df.index <= lag_date]
            
#             if len(available_dates) == 0:
#                 st.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ª–∞–≥–∞ {lag} –Ω–∞ –¥–∞—Ç—É {forecast_date.strftime('%Y-%m-%d')}")
#                 return None
                
#             closest_date = available_dates.max()
#             features[f'lag_{lag}'] = extended_df.loc[closest_date, 'log_price']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        
#         # –§–æ—Ä–º–∏—Ä—É–µ–º DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
#         input_data = pd.DataFrame([features])[features_order]
        
#         # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
#         rf_pred = rf_model.predict(input_data)[0]
#         cat_pred = catboost_model.predict(input_data)[0]
#         log_pred = (rf_pred + cat_pred) / 2
        
#         # –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ –ª–æ–≥–∞—Ä–∏—Ñ–º–∞
#         final_pred = np.exp(log_pred)
        
#         # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
#         extended_df.loc[forecast_date] = {
#             '–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É': final_pred,
#             'log_price': log_pred,
#             'lag_1': features['lag_1'],
#             'lag_2': features['lag_2'],
#             'month': features['month'],
#             'quarter': features['quarter'],
#             'year': features['year']
#         }
        
#         predictions.append((forecast_date, final_pred))
    
#     return pd.DataFrame(predictions, columns=['Date', 'Predicted Price'])

# # –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# def main():
#     st.title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É')
    
#     # –≤—ã–±–æ—Ä –¥–∞—Ç—ã
#     last_historical_date = historical_df.index.max().date()
#     min_date = last_historical_date + timedelta(weeks=1)
    
#     input_date = st.date_input(
#         '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫):',
#         min_value=min_date,
#         max_value=last_historical_date + timedelta(weeks=26), # —Å—Ç–∞–≤–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–µ –≤ –ø–æ–ª–≥–æ–¥–∞ (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–∏ —Å–ª–∏—à–∫–æ–º –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –æ—á–µ–Ω—å –¥–∞–ª—å–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)
#         value=min_date
#     )
    
#     if input_date.weekday() != 0:
#         st.error("–¢–µ–Ω–¥–µ—Ä—ã –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º!")
#         return
    
#     if st.button('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑'):
#         start_date = pd.to_datetime(input_date)
        
#         # –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º
#         predictions = generate_predictions(start_date)
        
#         if predictions is not None:
#             # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥
#             forecast_df = predictions.set_index('Date')
            
#             # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
#             predicted_prices = forecast_df['Predicted Price'].tolist()
#             current_price = predicted_prices[0]
            
#             # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
#             possible_n = 0
#             for n in predicted_prices:
#                 if current_price <= n:
#                     possible_n += 1
#                 elif current_price > n:
#                     break

#             max_n = possible_n if possible_n != 0 else 1
            
#             # –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
#             fig, ax = plt.subplots(figsize=(10, 5))
#             ax.plot(forecast_df.index, forecast_df['Predicted Price'], marker='o', 
#                     linestyle='-', linewidth=2, markersize=8, label='–ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Ü–µ–Ω–∞')
#             ax.axhline(y=current_price, color='red', linestyle='--', 
#                       label=f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} —Ä—É–±/—Ç')
#             ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
#             ax.set_ylabel('–¶–µ–Ω–∞ (—Ä—É–±/—Ç)', fontsize=12)
#             ax.set_title('–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É', fontsize=14, pad=20)
#             ax.legend(prop={'size': 10})
#             plt.xticks(rotation=45)
#             plt.grid(True, linestyle='--', alpha=0.7)
#             plt.tight_layout()
#             st.pyplot(fig)
            
#             # –≤—ã–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
#             st.subheader("–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:")
#             col1, col2 = st.columns(2)
            
#             with col1:
#                 st.write("**–î–∞—Ç—ã –∏ —Ü–µ–Ω—ã:**")
#                 st.dataframe(forecast_df.reset_index().style.format({
#                     'Date': lambda x: x.strftime('%Y-%m-%d'),
#                     'Predicted Price': '{:.2f} —Ä—É–±'
#                 }))
            
#             with col2:
#                 st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
#                 st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{forecast_df.mean().values[0]:.2f} —Ä—É–±")
#                 st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{forecast_df.min().values[0]:.2f} —Ä—É–±")
#                 st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{forecast_df.max().values[0]:.2f} —Ä—É–±")
            
#             # –≤—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
#             st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
#             with st.container():
#                 if max_n == 1:
#                     st.success(f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—É–ø–∫–∏: {max_n} –Ω–µ–¥–µ–ª—è")
#                 elif max_n in [2, 3, 4]:
#                     st.success(f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—É–ø–∫–∏: {max_n} –Ω–µ–¥–µ–ª–∏")
#                 elif max_n in [5, 6]:
#                     st.success(f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—É–ø–∫–∏: {max_n} –Ω–µ–¥–µ–ª—å")



# main()

# import streamlit as st
# import pandas as pd
# import pickle
# from datetime import timedelta
# import matplotlib.pyplot as plt

# # –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
# with open(r'C:\Users\–ï–≤–≥–µ–Ω–∏—è\Desktop\reinforcement_task\data\scaler1.pkl', 'rb') as f:
#     model = pickle.load(f)

# # –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
# historical_df = pd.read_csv(r'C:\Users\–ï–≤–≥–µ–Ω–∏—è\Desktop\reinforcement_task\data\historical_data.csv')
# historical_df['dt'] = pd.to_datetime(historical_df['dt'])
# historical_df = historical_df.set_index('dt')

# def generate_predictions(start_date, weeks_ahead=6):
#     current_date = start_date
#     predictions = []
    
#     # —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
#     extended_df = historical_df.copy().sort_index()
    
#     # –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º –Ω–∞ 6 –Ω–µ–¥–µ–ª—å –≤–ø–µ—Ä–µ–¥
#     for week in range(weeks_ahead):
#         forecast_date = current_date + timedelta(weeks=week)
        
#         # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
#         if forecast_date in extended_df.index:
#             continue
            
#         # —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
#         features = {
#             'year': forecast_date.year,
#             'month': forecast_date.month,
#             'day': forecast_date.day,
#             'week': forecast_date.isocalendar().week,
#         }
        
#         # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∞–≥–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–ª–∏–∂–∞–π—à–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
#         for lag in [1, 2]:
#             lag_date = forecast_date - timedelta(weeks=lag)
#             available_dates = extended_df.index[extended_df.index <= lag_date]
            
#             if len(available_dates) == 0:
#                 st.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ª–∞–≥–∞ {lag} –Ω–∞ –¥–∞—Ç—É {forecast_date.strftime('%Y-%m-%d')}")
#                 return None
                
#             closest_date = available_dates.max()
#             features[f'lag_{lag}'] = extended_df.loc[closest_date, '–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É']
        
#         # –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —Ü–µ–Ω—É
#         prediction = model.predict(pd.DataFrame([features]))[0]
        
#         # –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
#         extended_df.loc[forecast_date] = {
#             '–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É': prediction,
#             'lag_1': features['lag_1'],
#             'lag_2': features['lag_2']
#         }
        
#         predictions.append((forecast_date, prediction))
    
#     return pd.DataFrame(predictions, columns=['Date', 'Predicted Price'])

# def main():
#     st.title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É')
    
#     # –≤—ã–±–æ—Ä –¥–∞—Ç—ã
#     last_historical_date = historical_df.index.max().date()
#     min_date = last_historical_date + timedelta(weeks=1)
    
#     input_date = st.date_input(
#         '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫):',
#         min_value=min_date,
#         max_value=last_historical_date + timedelta(weeks=26), # —Å—Ç–∞–≤–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–µ –≤ –ø–æ–ª–≥–æ–¥–∞ (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–∏ —Å–ª–∏—à–∫–æ–º –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –æ—á–µ–Ω—å –¥–∞–ª—å–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)
#         value=min_date
#     )
    
#     if input_date.weekday() != 0:
#         st.error("–¢–µ–Ω–¥–µ—Ä—ã –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º!")
#         return
    
#     if st.button('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑'):
#         start_date = pd.to_datetime(input_date)
        
#         # –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º
#         predictions = generate_predictions(start_date)
        
#         if predictions is not None:
#             # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥
#             forecast_df = predictions.set_index('Date')
            
#             # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
#             predicted_prices = forecast_df['Predicted Price'].tolist()
#             current_price = predicted_prices[0]
            
#             # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
#             possible_n = 0
#             for n in predicted_prices:
#                 if current_price <= n:
#                     possible_n += 1
#                 elif current_price > n:
#                     break

#             max_n = possible_n if possible_n != 0 else 1
            
#             # –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
#             fig, ax = plt.subplots(figsize=(10, 5))
#             ax.plot(forecast_df.index, forecast_df['Predicted Price'], marker='o', 
#                     linestyle='-', linewidth=2, markersize=8, label='–ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Ü–µ–Ω–∞')
#             ax.axhline(y=current_price, color='red', linestyle='--', 
#                       label=f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} —Ä—É–±/—Ç')
#             ax.set_xlabel('–î–∞—Ç–∞', fontsize=12)
#             ax.set_ylabel('–¶–µ–Ω–∞ (—Ä—É–±/—Ç)', fontsize=12)
#             ax.set_title('–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É', fontsize=14, pad=20)
#             ax.legend(prop={'size': 10})
#             plt.xticks(rotation=45)
#             plt.grid(True, linestyle='--', alpha=0.7)
#             plt.tight_layout()
#             st.pyplot(fig)
            
#             # –≤—ã–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
#             st.subheader("–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:")
#             col1, col2 = st.columns(2)
            
#             with col1:
#                 st.write("**–î–∞—Ç—ã –∏ —Ü–µ–Ω—ã:**")
#                 st.dataframe(forecast_df.reset_index().style.format({
#                     'Date': lambda x: x.strftime('%Y-%m-%d'),
#                     'Predicted Price': '{:.2f} —Ä—É–±'
#                 }))
            
#             with col2:
#                 st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
#                 st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{forecast_df.mean().values[0]:.2f} —Ä—É–±")
#                 st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{forecast_df.min().values[0]:.2f} —Ä—É–±")
#                 st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{forecast_df.max().values[0]:.2f} —Ä—É–±")
            
#             # –≤—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
#             st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
#             with st.container():
#                 if max_n == 1:
#                     st.success(f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—É–ø–∫–∏: {max_n} –Ω–µ–¥–µ–ª—è")
#                 elif max_n in [2, 3, 4]:
#                     st.success(f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—É–ø–∫–∏: {max_n} –Ω–µ–¥–µ–ª–∏")
#                 elif max_n in [5, 6]:
#                     st.success(f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—É–ø–∫–∏: {max_n} –Ω–µ–¥–µ–ª—å")



# main()

# –∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
# import streamlit as st
# import pandas as pd
# import numpy as np
# import joblib
# from datetime import datetime, timedelta
# import matplotlib.pyplot as plt

# # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
# @st.cache_resource
# def load_model():
#     try:
#         model_data = joblib.load(r'C:\Users\–ï–≤–≥–µ–Ω–∏—è\Desktop\reinforcement_task\data\armor_price_model_ensemble.pkl')
#         return (
#             model_data['rf_model'],
#             model_data['catboost_model'],
#             model_data['features_order']
#         )
#     except Exception as e:
#         st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
#         return None, None, None

# # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
# @st.cache_data
# def load_historical_data():
#     df = pd.read_csv(r'C:\Users\–ï–≤–≥–µ–Ω–∏—è\Desktop\reinforcement_task\data\historical_data.csv', parse_dates=['dt'])
#     return df.set_index('dt').sort_index().asfreq('D').dropna()

# # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
# def generate_predictions(start_date, historical_df, models, features_order, days_ahead=7):
#     rf_model, catboost_model = models
#     predictions = []
    
#     current_date = start_date
#     temp_df = historical_df.copy()
    
#     for _ in range(days_ahead):
#         # –°–æ–∑–¥–∞–µ–º —Ñ–∏—á–∏ –¥–ª—è –¥–∞—Ç—ã
#         features = {
#             'month': current_date.month,
#             'quarter': (current_date.month-1)//3 + 1,
#             'year': current_date.year,
#             'lag_1': temp_df['log_price'].iloc[-1],
#             'lag_2': temp_df['log_price'].iloc[-2]
#         }
        
#         # –§–æ—Ä–º–∏—Ä—É–µ–º DataFrame
#         features_df = pd.DataFrame([features])[features_order]
        
#         # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º
#         log_pred_rf = rf_model.predict(features_df)[0]
#         log_pred_cat = catboost_model.predict(features_df)[0]
#         log_pred = (log_pred_rf + log_pred_cat) / 2
#         pred = np.exp(log_pred)
        
#         # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
#         new_row = {
#             'log_price': log_pred,
#             'lag_1': features['lag_1'],
#             'lag_2': features['lag_2'],
#             'month': current_date.month,
#             'quarter': features['quarter'],
#             'year': current_date.year,
#             '–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É': pred
#         }
        
#         temp_df.loc[current_date] = new_row
#         predictions.append((current_date, pred))
#         current_date += timedelta(days=1)
    
#     return pd.DataFrame(predictions, columns=['–î–∞—Ç–∞', '–ü—Ä–æ–≥–Ω–æ–∑']).set_index('–î–∞—Ç–∞')
# def main():
#     st.title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É')
#     st.markdown("### –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–æ–Ω—ä—é–Ω–∫—Ç—É—Ä—ã —Å—Ç–∞–ª–µ–ø—Ä–æ–∫–∞—Ç–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
    
#     # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
#     rf_model, catboost_model, features_order = load_model()
#     historical_df = load_historical_data()
    
#     if rf_model is None or historical_df is None:
#         return
    
#     # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
#     last_date = historical_df.index.max().to_pydatetime().date()
#     min_date = last_date + timedelta(days=1)
    
#     with st.sidebar:
#         st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
#         input_date = st.date_input(
#             '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞:',
#             min_value=min_date,
#             max_value=last_date + timedelta(days=90),
#             value=min_date,
#             key='date_input'  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
#         )
        
#         days_ahead = st.slider(
#             '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞:',
#             min_value=7,
#             max_value=30,
#             value=14,
#             key='days_slider'  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
#         )
        
#         # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–Ω–æ–ø–∫–∏
#         if st.button('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑', key='forecast_button'):
#             input_date_pd = pd.to_datetime(input_date)
#             min_date_pd = pd.to_datetime(min_date)
            
#             if input_date_pd < min_date_pd:
#                 st.error("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –¥–∞—Ç–∏!")
#                 return
#             else:
#                 with st.spinner('–ò–¥–µ—Ç —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞...'):
#                     st.session_state.predictions = generate_predictions(
#                         pd.to_datetime(input_date),
#                         historical_df,
#                         (rf_model, catboost_model),
#                         features_order,
#                         days_ahead
#                     )

#     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
#     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
#     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
#     if 'predictions' in st.session_state and st.session_state.predictions is not None:
#         # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
#         fig, ax = plt.subplots(figsize=(12, 6))
        
#         # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
#         start_date = st.session_state.predictions.index.min()
#         end_date = st.session_state.predictions.index.max()
        
#         # –†–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥–Ω–æ–∑
#         st.session_state.predictions['–ü—Ä–æ–≥–Ω–æ–∑'].plot(
#             ax=ax, 
#             label='–ü—Ä–æ–≥–Ω–æ–∑', 
#             color='#ff7f0e', 
#             linewidth=2, 
#             marker='o',
#             title='–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É'
#         )
        
#         # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏ –∏ —Å–µ—Ç–∫—É
#         ax.set_xlim(start_date - timedelta(days=1), end_date + timedelta(days=1))
#         ax.set_xlabel('–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞', fontsize=12)
#         ax.set_ylabel('–¶–µ–Ω–∞, —Ä—É–±/—Ç', fontsize=12)
#         ax.grid(True, linestyle='--', alpha=0.7)
#         ax.legend()
        
#         # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –Ω–∞ –æ—Å–∏ X
#         plt.xticks(
#             pd.date_range(start=start_date, end=end_date, freq='D'),
#             rotation=45,
#             ha='right'
#         )
        
#         # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
#         plt.tight_layout()
#         st.pyplot(fig)

# if __name__ == '__main__':
#     main()

# # –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
# import streamlit as st
# import pandas as pd
# import pickle
# from datetime import datetime, timedelta
# import matplotlib.pyplot as plt

# # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
# # –ó–∞–≥—Ä—É–∑–∫–∞ scaler
# # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
# @st.cache_resource
# def load_model():
#     try:
#         with open(r'C:\Users\–ï–≤–≥–µ–Ω–∏—è\Desktop\reinforcement_task\data\scaler.pkl', 'rb') as f:
#             model = pickle.load(f)
#         return model
#     except FileNotFoundError:
#         st.error("–§–∞–π–ª lgbm_model.pkl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
#         return None
#     except Exception as e:
#         st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
#         return None

# # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π main()
# @st.cache_data
# def load_historical_data():
#     df = pd.read_csv(r'C:\Users\–ï–≤–≥–µ–Ω–∏—è\Desktop\reinforcement_task\data\historical_data.csv', parse_dates=['dt'])
#     return df.set_index('dt').sort_index().dropna()

# # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
# def generate_predictions(start_date, historical_df, model, weeks_ahead=6):
#     predictions = []
#     current_date = start_date
#     extended_df = historical_df.copy().sort_index()
    
#     for week in range(weeks_ahead):
#         forecast_date = current_date + timedelta(weeks=week)
        
#         if forecast_date in extended_df.index:
#             continue
            
#         # –°–æ–∑–¥–∞–µ–º —Ñ–∏—á–∏
#         features = {
#             'year': forecast_date.year,
#             'month': forecast_date.month,
#             'day': forecast_date.day,
#             'week': forecast_date.isocalendar().week,
#         }
        
#         # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∞–≥–∏
#         for lag in [1, 2]:
#             lag_date = forecast_date - timedelta(weeks=lag)
#             available_dates = extended_df.index[extended_df.index <= lag_date]
            
#             if len(available_dates) == 0:
#                 st.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ª–∞–≥–∞ {lag} –Ω–∞ {forecast_date.strftime('%Y-%m-%d')}")
#                 return None
                
#             closest_date = available_dates.max()
#             features[f'lag_{lag}'] = extended_df.loc[closest_date, '–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É']
        
#         # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º
#         prediction = model.predict(pd.DataFrame([features]))[0]
        
#         # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
#         extended_df.loc[forecast_date] = {
#             '–¶–µ–Ω–∞ –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É': prediction,
#             'lag_1': features['lag_1'],
#             'lag_2': features['lag_2']
#         }
        
#         predictions.append((forecast_date, prediction))
    
#     return pd.DataFrame(predictions, columns=['–î–∞—Ç–∞', '–ü—Ä–æ–≥–Ω–æ–∑']).set_index('–î–∞—Ç–∞')

# def main():
#     st.title('–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É')
#     st.markdown("### –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–æ–Ω—ä—é–Ω–∫—Ç—É—Ä—ã —Å—Ç–∞–ª–µ–ø—Ä–æ–∫–∞—Ç–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
    
#     # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
#     model = load_model()
#     historical_df = load_historical_data()
    
#     if model is None or historical_df.empty:
#         return
    
#     # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
#     last_date = historical_df.index.max().to_pydatetime().date()
#     min_date = last_date + timedelta(days=1)
    
#     with st.sidebar:
#         st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
#         input_date = st.date_input(
#             '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫):',
#             min_value=min_date,
#             max_value=last_date + timedelta(weeks=26),
#             value=min_date
#         )
        
#         if st.button('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑'):
#             if input_date.weekday() != 0:
#                 st.error("–¢–µ–Ω–¥–µ—Ä—ã –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º!")
#                 return
            
#             start_date = pd.to_datetime(input_date)
#             with st.spinner('–ò–¥–µ—Ç —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞...'):
#                 st.session_state.predictions = generate_predictions(
#                     start_date,
#                     historical_df,
#                     model
#                 )

#     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
#     if 'predictions' in st.session_state and st.session_state.predictions is not None:
#         predictions = st.session_state.predictions
#         current_price = predictions.iloc[0]['–ü—Ä–æ–≥–Ω–æ–∑']
        
#         # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
#         fig, ax = plt.subplots(figsize=(12, 6))
#         predictions['–ü—Ä–æ–≥–Ω–æ–∑'].plot(
#             ax=ax, 
#             label='–ü—Ä–æ–≥–Ω–æ–∑', 
#             color='#ff7f0e', 
#             linewidth=2, 
#             marker='o',
#             title='–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω –Ω–∞ –∞—Ä–º–∞—Ç—É—Ä—É'
#         )
        
#         # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
#         ax.axhline(
#             y=current_price, 
#             color='red', 
#             linestyle='--', 
#             label=f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f} —Ä—É–±/—Ç'
#         )
        
#         # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
#         ax.set_xlabel('–î–∞—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞', fontsize=12)
#         ax.set_ylabel('–¶–µ–Ω–∞, —Ä—É–±/—Ç', fontsize=12)
#         ax.grid(True, linestyle='--', alpha=0.7)
#         ax.legend()
#         plt.xticks(rotation=45)
#         plt.tight_layout()
#         st.pyplot(fig)
        
#         # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
#         st.subheader("–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞")
        
#         # –†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
#         max_n = 0
#         for price in predictions['–ü—Ä–æ–≥–Ω–æ–∑'][1:]:
#             if current_price <= price:
#                 max_n += 1
#             else:
#                 break
        
#         # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
#         col1, col2 = st.columns(2)
#         with col1:
#             st.markdown("**–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**")
#             st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{predictions['–ü—Ä–æ–≥–Ω–æ–∑'].mean():.2f} —Ä—É–±/—Ç")
#             st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{predictions['–ü—Ä–æ–≥–Ω–æ–∑'].min():.2f} —Ä—É–±/—Ç")
            
#         with col2:
#             st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
#             if max_n == 0:
#                 st.warning("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–∫—É–ø–∫—É –≤ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
#             else:
#                 weeks_label = "–Ω–µ–¥–µ–ª—å" if max_n > 1 else "–Ω–µ–¥–µ–ª—è"
#                 st.success(f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫—É–ø–∫–∏: {max_n} {weeks_label}")

# if __name__ == '__main__':
#     main()